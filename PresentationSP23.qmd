---
title: "Using Gradient-Boosted Machine Learning Models to Forecast Lake Water Quality"
author: "Greg Harrison"
format: revealjs
cite-method: biblatex
editor: visual
---

## NEON Forecasting Challenge

-   Forecasting in ecology has potential to improve natural resource management and advance predictive theory.
-   To help realize this potential, the Ecological Forecasting Initiative is hosting a data science challenge to accurately forecast observations at National Ecological Observatory Network (NEON) sites across the U.S.
-   Focused on aquatics theme, generating 1- to 30-day ahead forecasts of water temperature, dissolved oxygen, and chlorophyll-a at 24 lakes and streams.
-   Contributes to a growing set of automated forecasting models that will be used to quantify the boundaries prediction in ecology.

```{=html}
<!--Neon forecasting challenge Neon Satelite Image of the two lakes What is the point of doing the forecasts and why are we trying a bunch of different methods

Trying to predict nature, a lot of different models going the same thing-->
```
![](Images/NeonWorkflow.jpeg){width="541"}

## What is XGBoost?

-   **XGBoost** (Extreme Gradient Boosting): Ensemble model based on decisions trees that utilizes Gradient Boosting and is optimized to run fast
-   **Ensemble**: Combines multiple models together for enhanced performance
-   **Gradient Boosting**: Each new model learns to correct for previous models shortcomings
-   **Extreme**: Can use parallelization and GPUs to speed up training

## XGBoost Diagram

![](Images/xgboostpicture.webp){width="544", fig-align="center"}

## Where has XGBoost been used before?

XGBoost has been used to predict:

-   Groundwater levels in Selangor, Malaysia, outperforming both ANNs and SVMs[^1]

-   Changes in ICU Covid-19 Patients' Sequential Organ Failure Assessment scores [^2]

-   Heart Disease in Clinic patients with around 91.8% accuracy [^3]

[^1]: Ibrahem Ahmed Osman, A., Najah Ahmed, A., Chow, M. F., Feng Huang, Y., & El-Shafie, A. (2021). Extreme gradient boosting (Xgboost) model to predict the groundwater levels in Selangor Malaysia. *Ain Shams Engineering Journal*, *12*(2), 1545-1556. https://doi.org/10.1016/j.asej.2020.11.011

[^2]: Montomoli, J., Romeo, L., Moccia, S., Bernardini, M., Migliorelli, L., Berardini, D., Donati, A., Carsetti, A., Bocci, M. G., Wendel Garcia, P. D., Fumeaux, T., Guerci, P., Sch√ºpbach, R. A., Ince, C., Frontoni, E., Hilty, M. P., & Investigators, I. (2021). Machine learning using the extreme gradient boosting (XGBoost) algorithm predicts 5-day delta of SOFA score at ICU admission in COVID-19 patients. *Journal of Intensive Medicine*, *1*(2), 110-116. https://doi.org/10.1016/j.jointm.2021.09.002

[^3]: Budholiya, K., Shrivastava, S. K., & Sharma, V. (2022). An optimized XGBoost based diagnostic system for effective prediction of heart disease. *Journal of King Saud University - Computer and Information Sciences*, *34*(7), 4514-4523. https://doi.org/10.1016/j.jksuci.2020.10.013

## Questions

-   How well does XGBoost perform in forecasting temperature, oxygen, and chlorophyll-a compare to baseline models such as Climatology and Persistence?
-   Do oxygen and chlorophyll-a forecasts benefit from using forecasted water temperature?

## Methods

-   R script to train XGBoost models on historical data, used day of year and forecasted air temperatures as inputs.
-   Reserved random 20% of data to evaluate model performance.
-   Forecast distribution due to combination of ensemble variance and random noise added based on model performance on testing data.
-   Two main families of models, parallel where each variable was predicted independently of the others, and sequential, where predicted water temperature was used as an input for Dissolved Oxygen and Chlorophyll-a

## Parallel Model

![](Images/ParallelModel.png){width="544", fig-align="center"}

## Sequential Model

![](Images/SequentialModel.png){width="544", fig-align="center"}

## Methods

```{=html}
<!--When started submitting and how many submissions do I have Explain how the different models work Github actions is the last thing,

inputs drivers, talk about features of the model

Whole slide about model we are using, another slide about deployment of model-->
```
-   Using Github actions produce a reproducible workflow that produces daily forecasts.
-   Every day a new XGBoost model is trained for each NEON site and target variable, and then uses NOAA forecasts to predict values 30 days into the future and submits.
-   Forecasting since February 14, 2023 (n = 65)

<!--Change everything to logs-->

```{=html}
<!--## Specific Lake Evaluation

Look at results aggregated from Lakes Barco and Suggs, two similar lakes in northern Florida
-->
```
## Focal Analysis Sites

Our results will focus on Lake Suggs and Lake Barco, two similar lakes in northern Florida.

![](Images/SUGG_BARC.png){width="544", fig-align="center"}

```{r}
library(ggplot2)
library(dplyr)
library(gridExtra)
library(ggpubr)
```

```{r}
scores <- neon4cast::combined_scores(theme="aquatics", collect=FALSE)

model_ids <- c("xgboost_temp_oxygen_parallel", "xgboost_temp_oxygen_sequential", "xgboost_temp_oxygen_chla_parallel", "xgboost_temp_oxygen_chla_sequential", "climatology", "flareGLM", "persistenceRW")

df <- scores %>% 
  dplyr::filter(model_id %in% model_ids) %>% 
  dplyr::filter(reference_datetime > "2023-02-01") %>% 
  dplyr::collect()
```

```{r}
df <- df %>% dplyr::mutate(horizon = datetime-lubridate::as_datetime(reference_datetime)) %>%
    dplyr::mutate(horizon = as.numeric(lubridate::as.duration(horizon),
                                units = "seconds"),
           horizon = horizon / 86400)

```

## Example Forecast

This is what were analyzing

```{r}
ggplot(df %>% filter(site_id=="SUGG") %>% filter(reference_datetime=="2023-02-21") %>% filter(model_id=="xgboost_temp_oxygen_chla_parallel")) + geom_ribbon(aes(x=horizon, ymin=quantile02.5, ymax=quantile97.5), alpha=0.5) + geom_line(aes(x=horizon, y=median)) + facet_wrap(~variable, scales = "free") + geom_point(aes(x=horizon, y=observation)) 
```

# Results

```{r}
combined_df <- df
combined_df$model_id[combined_df$model_id == "xgboost_temp_oxygen_chla_parallel"] <- "xgboost_temp_oxygen_parallel"
combined_df$model_id[combined_df$model_id == "xgboost_temp_oxygen_chla_sequential"] <- "xgboost_temp_oxygen_sequential"
combined_df$site_id[combined_df$site_id == "SUGG"] <- "BARC"
```

```{r}
model_means <- combined_df %>%   
   group_by(model_id, horizon, variable, site_id) %>% 
   summarise_at(c("crps","logs"), mean, na.rm = TRUE) 

```

````{=html}
<!--## Avg Model Temperature Performance

```{r}
model_means2 <- combined_df %>%   
   group_by(model_id, horizon, variable) %>% 
   summarise_at(c("crps","logs"), mean, na.rm = TRUE) 


ggplot(model_means2 %>% filter(variable=="temperature"), aes(x=horizon, y=logs, color=model_id)) + geom_line() + facet_wrap(~variable)
# plot2 <- ggplot(model_means2 %>% filter(variable=="chla"), aes(x=horizon, y=logs, color=model_id)) + geom_line() + facet_wrap(~variable) 
# ggarrange(plot1,plot2, ncol=2, common.legend = TRUE) 
```
-->

## Temperature

```{r}
ggplot(model_means %>% filter(variable=="temperature") %>% filter(site_id=="BARC"), aes(x=horizon, y=logs,
      color=model_id)) + geom_line() + facet_wrap(~variable) + facet_wrap(~variable) + ylim(0,3) +
      theme(legend.position="bottom")
```

<!--## Avg Model Oxygen Performance
-->
````

````{=html}
<!--```{r}
model_means2 <- combined_df %>%   
   group_by(model_id, horizon, variable) %>% 
   summarise_at(c("crps","logs"), mean, na.rm = TRUE) 


ggplot(model_means2 %>% filter(variable=="oxygen"), aes(x=horizon, y=logs, color=model_id)) + geom_line() + facet_wrap(~variable) # + ylim(0,10)
# plot2 <- ggplot(model_means2 %>% filter(variable=="chla"), aes(x=horizon, y=logs, color=model_id)) + geom_line() + facet_wrap(~variable) 
# ggarrange(plot1,plot2, ncol=2, common.legend = TRUE) 
```-->
````

## Oxygen

```{r}
ggplot(model_means %>% filter(variable=="oxygen") %>% filter(site_id=="BARC"), aes(x=horizon, y=logs, 
      color=model_id)) + geom_line() + facet_wrap(~variable) +  theme(legend.position="bottom") 
```

````{=html}
<!--## Avg Model CHLA Performance

```{r}
model_means2 <- combined_df %>%   
   group_by(model_id, horizon, variable) %>% 
   summarise_at(c("crps","logs"), mean, na.rm = TRUE) 


ggplot(model_means2 %>% filter(variable=="chla"), aes(x=horizon, y=logs, color=model_id)) + geom_line() + facet_wrap(~variable)
#plot2 <- ggplot(model_means2 %>% filter(variable=="chla"), aes(x=horizon, y=logs, color=model_id)) + geom_line() + facet_wrap(~variable) 
# ggarrange(plot1,plot2, ncol=2, common.legend = TRUE) 
```
-->
````

<!--(Show with and without persistence What does climatology all of a sudden get amazing)-->

````{=html}
<!--## Avg Model CHLA Performance (w/o Persistence)

```{r}
ggplot(model_means2 %>% filter(variable=="chla") %>% filter(model_id != "persistenceRW"), aes(x=horizon, y=logs, color=model_id)) + geom_line() + facet_wrap(~variable)
``` 
-->
````

## Chlorphyll-a

```{r}
# library(ggpubr)
ggplot(model_means %>% filter(variable=="chla") %>% filter(site_id=="BARC"), aes(x=horizon, y=logs, color=model_id)) + geom_line() + facet_wrap(~variable) 
```

````{=html}
<!--## Single Prediction

```{r}
ggplot(df %>% filter(site_id=="BARC") %>% filter(model_id!="persistenceRW") %>% 
    filter(reference_datetime=="2023-03-28"), aes(x=horizon, y=prediction, color=model_id)) +
    geom_line(aes(x=horizon, y=prediction, color=model_id)) + 
    geom_ribbon(aes(ymin=quantile10, ymax=quantile90, fill=model_id), alpha=0.3) +
    facet_wrap(~variable, scales = "free") 
```

## Temperature Predictions at Various Dates

```{r}
ggplot(df %>% filter(site_id=="BARC") %>% filter(variable=="temperature") %>%
    filter(model_id!="persistenceRW") %>% 
    filter(reference_datetime %in% c("2023-02-14", "2023-02-21","2023-02-28", "2023-03-08")) %>% 
    filter(model_id %in% c("climatology", "flareGLM","xgboost_temp_oxygen_parallel")),
    aes(x=horizon, y=prediction, color=model_id)) +
    geom_line(aes(x=horizon, y=prediction, color=model_id)) + 
    geom_ribbon(aes(ymin=quantile10, ymax=quantile90, fill=model_id), alpha=0.3) +
    facet_wrap(~reference_datetime) 

```-->

## Money figure

y axis: delta log off of climatology x axis: horizon, $delta$ log $2^{\Delta \log differnce}$ log probability with climatology add negative if its worse and positive if its better

```{r}
#model_means <- combined_df %>%   
#   group_by(model_id, horizon, variable, site_id) %>% 
#   summarise_at(c("crps","logs"), mean, na.rm = TRUE) 

temperature <- model_means %>% filter(variable=="temperature") %>% filter(model_id=="xgboost_temp_oxygen_parallel") %>% filter(site_id=="BARC")
oxygen <- model_means %>% filter(variable=="oxygen") %>% filter(model_id=="xgboost_temp_oxygen_parallel") %>% filter(site_id=="BARC")
chla <- model_means %>% filter(variable=="chla") %>% filter(model_id=="xgboost_temp_oxygen_parallel") %>% filter(site_id=="BARC")
ctemperature <- model_means %>% filter(variable=="temperature") %>% filter(model_id=="climatology") %>% filter(site_id=="BARC")
coxygen <- model_means %>% filter(variable=="oxygen") %>% filter(model_id=="climatology") %>% filter(site_id=="BARC")
cchla <- model_means %>% filter(variable=="chla") %>% filter(model_id=="climatology") %>% filter(site_id=="BARC")

xgb <- model_means %>% filter(model_id=="xgboost_temp_oxygen_parallel") %>% filter(site_id=="BARC")
clim <- model_means %>% filter(model_id=="climatology") %>% filter(site_id=="BARC")
xgb["diff"] = 2^(-(xgb$logs-clim$logs))

```

```{r}
#ggplot(model_means %>% filter(site_id=="BARC") %>% filter(variable=="chla")) + geom_line(aes(horizon, logs, color=model_id))
```

```{r}
ggplot(xgb) + geom_line(aes(xgb$horizon, xgb$diff, color=variable))+ylim(0,2) + geom_hline(yintercept = 0) + annotate("Performs better than climatology")

% anything less
```

# Other Themes

<!--Phenology do mountain lake, compare to climatology, terrestrial daily and phenology for mountain lake biological station and compare to climatology-->
````

## Mountain Lake Biological Station

```{r}
mlscores <- neon4cast::combined_scores(theme="phenology", collect=FALSE)

mlmodel_ids <- c("climatology", "xgboost_parallel")

mldf <- mlscores %>% 
  dplyr::filter(model_id %in% mlmodel_ids) %>% 
  dplyr::filter(reference_datetime > "2023-03-01") %>% 
  dplyr::collect()
```

```{r}
mldf <- mldf %>% dplyr::mutate(horizon = datetime-lubridate::as_datetime(reference_datetime)) %>%
    dplyr::mutate(horizon = as.numeric(lubridate::as.duration(horizon),
                                units = "seconds"),
           horizon = horizon / 86400)
mlmodel_means <- mldf %>%   
   group_by(model_id, horizon, variable, site_id) %>% 
   summarise_at(c("crps","logs"), mean, na.rm = TRUE) 

```

```{r}
ggplot(mlmodel_means %>% filter(site_id=="MLBS")%>% filter(variable=="gcc_90")) + geom_line(aes(horizon, logs, color=model_id)) + ggtitle("Mountain Lake Biological Station (gcc_90)") + labs(fill = "Model")
```

## Conclusions

Using XGBoost we are able to show strong forecasting capabilities even with minimal model inputs. Does better some variables than others, what horizons Further exploration into refining our application of this model to ecological forecasting will likely bring great results.

## References
